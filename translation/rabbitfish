#!/bin/bash
# Copyright (C) 2014 Sean Donovan

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# German

## Common
export KITCHENTITLE=$( echo "Swordrune10 Android Kitchen!" )
export KITCHENUNDERLINE=$( echo "===========================" )
export MENUGOBACK=$( echo "Zurück" )
export NOTPROPERSELECTION=$( echo "Es wurde keine gültige Auswahl getroffen, bitte erneut versuchen!" )
export ENTERTOCONTINUE=$( echo "Eingabetaste drücken um fortzufahren: " )
export MAINMENURETURN=$( echo "Zurück zum Hauptmenü, mit Eingabetaste fortfahren: " )
export ABORTMESSAGE=$( echo "Abbruch..." )
export COMPLETEDMESSAGE=$( echo "Fertig!" )
export ANSWERYES=$( echo "Ja" )
export ANSWERY=$( echo "j" )
export ANSWERNO=$( echo "Nein" )
export ANSWERN=$( echo "n" )

## Macosxinit
export MACOSXINITRUN=$( echo "Sie verwenden Mac OS X!" )
export MACOSXINITCANTFINDDMG=$( echo "Es wurde kein Android-Image zum mounten gefunden, dies wird jedoch zur Builderstellung unter Mac OS X benötigt.
Wenn ein eigenes Build verwendet werden soll, muss dieses korrekt benannt in das richtige Verzeichnis kopiert werden.
Benennung und Ordnerstruktur kann beispielhaft im Homeverzeichnis unter android.dmg eingesehen werden (Beispiel: ~/android.dmg)

Soll jetzt ein neues Image erstellt werden?" )
export MACOSXINITHOWBIG=$( echo "Wie groß soll android.dmg sein? Beachte, dass die Größe des Images angepasst wird wenn mehr Platz benötigt wird.
Größe in GB angeben" )
export MACOSXINITMOUNTNEW=$( echo "Neues android.dmg wird in /volumes/android/ gemounted..." )
export MACOSXINITMOVEINTO=$( echo "Wechsel zu android.dmg..." )
export MACOSXINITSETUP=$( echo "Küche wird eingerichtet..." )
export MACOSXINITSETUP=$( echo "Küche wird eingerichtet..." )
export MACOSXINITFOUNDDMG=$( echo "Android.dmg gefunden, wird gemounted..." )
export MACOSXINITCANTFINDKITCHEN=$( echo "ROM Küche kann in /volumes/android/ nicht gefunden werden

Soll die Küche in /volumes/android installiert werden?" )

## Errors
export ERRORHEADER=$( echo "Ein Fehler ist aufgetreten!
======================" )
export ERRORSIDEEFFECTS=$( echo "Bei Problemen könnten fehlerhafte Builds erstellt werden, auch die Unterstützung der Kücheneinrichtungsumgebung könnte fehlerhaft sein" )
export ERRORCONTACTINFO=$( echo "Bitte informiert mich unbedingt beim Auftreten dieses Fehlers auf XDA oder Rootzwiki, gerne auch per E-Mail unter mishana@swordrune10.net oder auf meinem Freenodekanal unter #Swordrune10Kitchen" )
export BOUNCERPOWERPC=$( echo "PowerPC-Prozessor erkannt!
===========================
Von dem Betrieb dieser Software auf einem PowerPC wird abgeraten" )
export BOUNCER32BIT=$( echo "32-bit-Prozessor erkannt!
==========================
Von dem Betrieb dieser Software auf einem 32-bit-System wird abgeraten" )
export BOUNCERKITCHENHOME=$( echo "Küche nicht in korrektem Verzeichnis!
=================================
Küche wird im Homeverzeichnis nicht korrekt funktionieren, bitte verschieben" )
export ENVIRONMENTSETUP32BIT=$( echo "32-bit nicht unterstützt!
=====================
Umgebungsinstallation unterstützt ausschliesslich 64-bit-Systeme" )
export ENVIRONMENTSETUPNOTSUPPORTED=$( echo "Betriebssystem nicht unterstützt!
===============================
Unterstützte Betriebssysteme (nur 64-bit):
Ubuntu 10.04 - 14.04 (Voll unterstützt)
Debian (Grundunterstützung)
Linux Mint (Grundunterstützung)
Arch Linux (Grundunterstützung)
Fedora (Grundunterstützung)
Mac OS X (Teilweise grundunterstützt)" )

## Repos
export REPOSKITCHEN=$( echo "Küchen App" )
export REPOSAOKP=$( echo "Android Open Kang Project" )
export REPOSAOSP43=$( echo "Android Open Source Project 4.3" )
export REPOSAOSP=$( echo "Android Open Source Project 4.4" )
export REPOSCARBON=$( echo "Carbon" )
export REPOSCM10=$( echo "Cyanogenmod 10.2" )
export REPOSCM=$( echo "Cyanogenmod 11" )
export REPOSEV=$( echo "Evervolv" )
export REPOSOMNI=$( echo "Omnirom" )
export REPOSPACMAN=$( echo "PAC-Man" )
export REPOSPARA=$( echo "ParanoidAndroid" )

## Devices
export NEXUS4=$( echo "GSM Nexus 4" )
export NEXUS5=$( echo "LTE Nexus 5" )
export GSMGNEXUS=$( echo "GSM Galaxy Nexus" )
export SPRGNEXUS=$( echo "Sprint Galaxy Nexus" )
export VZWGNEXUS=$( echo "Verizon Galaxy Nexus" )
export ALLGNEXUS=$( echo "Alle Galaxy Nexus" )
export GSMNEXUSS=$( echo "GSM Nexus S" )
export SPRNEXUSS=$( echo "Sprint Nexus S 4G" )
export ALLNEXUSS=$( echo "Alle Nexus S'" )
export WIFINEXUS72012=$( echo "Wifi Nexus 7 (2012) Tablet" )
export GSMNEXUS72012=$( echo "GSM Nexus 7 (2012) Tablet" )
export ALLNEXUS72012=$( echo "Alle Nexus 7 (2012) Tablets" )
export WIFINEXUS72013=$( echo "Wifi Nexus 7 (2013) Tablet" )
export LTENEXUS72013=$( echo "LTE Nexus 7 (2013) Tablet" )
export ALLNEXUS72013=$( echo "Alle Nexus 7 (2013) Tablets" )
export ALLNEXUS7=$( echo "Alle Nexus 7 Tablets" )
export NEXUS10=$( echo "Wifi Nexus 10" )
export WIFIXOOM=$( echo "Wifi Xoom Tablet" )
export VZWXOOM=$( echo "Verizon Xoom Tablet" )
export ALLXOOM=$( echo "Alle Xoom Tablets" )
export ALLNEXUS=$( echo "Alle Nexus-Geräte" )

## Scriptmakir
export SCRIPTMAKIRREDEEMER=$( echo "Redeemer läuft!" )
export SCRIPTMAKIRRMKITCHEN=$( echo "Küche wird entfernt" )
export SCRIPTMAKIRSETUPKITCHEN=$( echo "Küche wird eingerichtet" )
export SCRIPTMAKIRDESTROYER=$( echo "Destroyer läuft!" )
export SCRIPTMAKIRDESTROYEROFWORLDS=$( echo "Der Weltenzerstörer arbeitet!" )
export SCRIPTMAKIRRMREPO=$( echo "Repo-Verzeichnis wird entfernt" )

## Kitchen
export KITCHENMAINMENU=$( echo "Hauptmenü:" )
export KITCHENMENU1=$( echo "Küche einrichten/aktualisieren" )
export KITCHENMENU2=$( echo "Küche konfigurieren" )
export KITCHENMENU3=$( echo "Starten" )
export KITCHENMENU4=$( echo "Küche reparieren" )
export KITCHENMENU5=$( echo "Autobuild" )
export KITCHENMENU6=$( echo "Beenden" )
export KITCHENMENUWHICH=$( echo "Was möchtest du tun?" )
export KITCHENTHANKS=$( echo "Vielen Dank für die Nutzung der Swordrune10 ROM-Küche! Auf Wiedersehen..." )
export KITCHENBORED=$( echo "Du scheinst dich zu langweilen...möchtest du einen Film anschauen?" )
export KITCHENTOUGH=$( echo "Super!" )

## Reposync
# Usage and Flags
export REPOSYNCUSAGE=$( echo "Repo -- Programm zur Initialisierung/Aktualisierung von Android-Repositorien" )
export REPOSYNCFLAGD=$( echo "Das entsprechende Verzeichnis löschen und Programm verlassen" )
export REPOSYNCFLAGH=$( echo "Diesen Hilfetext anzeigen" )
export REPOSYNCFLAGP=$( echo "Verzeichnis aufräumen, neu initialisieren und dann aktualisieren" )
export REPOSYNCFLAGU=$( echo "Dieses Repositorium aktualisieren" )
export REPOSYNCUPDATE1=$( echo "Aktualisiere $REPOSKITCHEN" )
export REPOSYNCUPDATE2=$( echo "Aktualisiere $REPOSAOKP" )
export REPOSYNCUPDATE3=$( echo "Aktualisiere $REPOSAOSP43" )
export REPOSYNCUPDATE4=$( echo "Aktualisiere $REPOSAOSP" )
export REPOSYNCUPDATE5=$( echo "Aktualisiere $REPOSCARBON" )
export REPOSYNCUPDATE6=$( echo "Aktualisiere $REPOSCM10" )
export REPOSYNCUPDATE7=$( echo "Aktualisiere $REPOSCM" )
export REPOSYNCUPDATE8=$( echo "Aktualisiere $REPOSEV" )
export REPOSYNCUPDATE9=$( echo "Aktualisiere $REPOSOMNI" )
export REPOSYNCUPDATE10=$( echo "Aktualisiere $REPOSPACMAN" )
export REPOSYNCUPDATE11=$( echo "Aktualisiere $REPOSPARA" )
export REPOSYNCUPDATE12=$( echo "Alle verfügbaren Repositorien aktualisieren" )
export REPOSYNCUPDATE13=$( echo "Alle Repositorien aktualisieren" )
export REPOSYNCUSAGEEXAMP=$( echo "Beispiel: reposync -u cm-10.2" )
export REPOSYNCUSAGELIST1=$( echo "Eingabe von \"reposync -u list\" gibt aus" )
export REPOSYNCUSAGELIST2=$( echo "Menüauswahl erneut anzeigen" )

# Menu
export REPOSYNCMENUWHAT=$( echo "Was soll aktualisiert werden?" )
export REPOSYNCMENUINIT=$( echo "Sollte das Repo noch nicht initialisiert sein, erfolgt dies bei der Aktualisierung" )
export REPOSYNCMENU1=$( echo "Repo installieren-Befehl" )
export REPOSYNCMENU2=$( echo "Builtumgebung einrichten" )
export REPOSYNCMENU3=$( echo "Aktualisiere $REPOSKITCHEN Repositorium" )
export REPOSYNCMENU4=$( echo "Aktualisiere $REPOSAOKP Repositorium" )
export REPOSYNCMENU5=$( echo "Aktualisiere $REPOSAOSP43 Repositorium" )
export REPOSYNCMENU6=$( echo "Aktualisiere $REPOSAOSP Repositorium" )
export REPOSYNCMENU7=$( echo "Aktualisiere $REPOSCARBON Repositorium" )
export REPOSYNCMENU8=$( echo "Aktualisiere $REPOSCM10 Repositorium" )
export REPOSYNCMENU9=$( echo "Aktualisiere $REPOSCM Repositorium" )
export REPOSYNCMENU10=$( echo "Aktualisiere $REPOSEV Repositorium" )
export REPOSYNCMENU11=$( echo "Aktualisiere $REPOSOMNI Repositorium" )
export REPOSYNCMENU12=$( echo "Aktualisiere $REPOSPACMAN Repositorium" )
export REPOSYNCMENU13=$( echo "Aktualisiere $REPOSPARA Repositorium" )
export REPOSYNCMENU14=$( echo "Aktualisiere available Repositorium" )
export REPOSYNCMENU15=$( echo "Aktualisiere alle Repositorien" )
export REPOSYNCMENU16=$( echo "Aktualisiere/Erstelle weiteres Repo" )

# Sync and Init
export REPOSYNCNOTINITSKIP=$( echo "Nicht initialisiert, überspringe" )
export REPOSYNCUPDATING=$( echo "Aktualisiere" )
export REPOSYNCBLAHSMANIFEST=$( echo "'s Manifest" )
export REPOSYNCNOTINITYET=$( echo "Nicht initialisiert, jetzt initialisieren" )
export REPOSYNCNOTINITWANTTO=$( echo "Nicht initialisiert, soll jetzt initialisiert werden?" )
export REPOSYNCINIT=$( echo "Initialisiere" )
export REPOSYNCNOTINIT=$( echo "war nicht initialisiert" )
export REPOSYNCREPO=$( echo "Repositorium" )
export REPOSYNCREPOALREADY=$( echo "Repo-Befehl bereits installiert" )
export REPOSYNCREPOINSTALL=$( echo "Repo-Befehl wird installiert" )
export REPOSYNCCOMPLETE=$( echo "Aktualisierung erfolgreich!" )

# Otherrepo Sync and Init
export REPOSYNCADDOR=$( echo "Erstellen oder aktualisieren eines anderen Repo?" )
export REPOSYNCOTHERMENU1=$( echo "Zu benutzerdefiniertem Repo-Verzeichnis hinzufügen" )
export REPOSYNCOTHERMENU2=$( echo "Alle benutzerdefinierten Repos aktualisieren" )
export REPOSYNCOTHERREPONAME=$( echo "Name des Repos eingeben" )
export REPOSYNCOTHERREPOSHORTNAME=$( echo "Bitte Kurzbezeichnung angeben, Beispiel: Android Open Source Project = AOSP" )
export REPOSYNCOTHERREPOURL=$( echo "URL zum Manifest des Repos eingeben" )
export REPOSYNCOTHERREPOBRANCH=$( echo "Welcher Branch des Repo-Manifests soll verwendet werden?" )

## Environmentsetup
export ENVIRONMENTSETUPINIT=$( echo "Entwicklungsumgebung wird initialisiert" )
export ENVIRONMENTSETUPOS=$( echo "Prüfe verwendetes Betriebssystem..." )
export ENVIRONMENTSETUPINSTALL=$( echo "Installationspakete fehlen, bitte Passwort eingeben" )
export ENVIRONMENTSETUPDXCODE=$( echo "Ist Xcode installiert? Wir empfehlen Version 3.1.4 oder neuer" )
export ENVIRONMENTSETUPDMACPORTS=$( echo "Ist MacPorts installiert?" )

# Platform
export ENVIRONMENTSETUPFEDORA=$( echo "Auf diesem System läuft Fedora oder RedHat!" )
export ENVIRONMENTSETUPDEBIAN=$( echo "Auf diesem System läuft Debian!" )
export ENVIRONMENTSETUPULMN=$( echo "Auf diesem System läuft Ubuntu, entweder 10.04, 10.10, oder 11.04!" )
export ENVIRONMENTSETUPUO=$( echo "Auf diesem System läuft Ubuntu 11.10!" )
export ENVIRONMENTSETUPUPQ=$( echo "Auf diesem System läuft Ubuntu 12.04 oder 12.10!" )
export ENVIRONMENTSETUPURST=$( echo "Auf diesem System läuft Ubuntu 13.04, 13.10, oder 14.04!" )
export ENVIRONMENTSETUPMINT=$( echo "Auf diesem System läuft Linux Mint!" )
export ENVIRONMENTSETUPARCH=$( echo "Auf diesem System läuft Arch Linux!" )
export ENVIRONMENTSETUPDARWIN=$( echo "Auf diesem System läuft Mac OS X!" )

# Java
export ENVIRONMENTSETUPFLEXION=$( echo "Die Java-Installation benötigt einen Moment. Um eine rechtlich einwandfreie Nutzung zu gewährleisten verwendet die ROM-Küche Auszüge von Flexion.org OAB-Java Script" )
export ENVIRONMENTSETUPFLEXION1=$( echo " [x] Java SE Download-Seite aufrufen" )
export ENVIRONMENTSETUPFLEXION2=$( echo " [x] Download-Seite der installierten Version aufrufen" )
export ENVIRONMENTSETUPFLEXION3=$( echo " [x] Download-Seite früherer Versionen aufrufen" )
export ENVIRONMENTSETUPWEBUPD8=$( echo "Die Java-Installation benötigt einen Moment. Um eine rechtlich einwandfreie Nutzung zu gewährleisten verwendet die ROM-Küche Webupd8's Java Installer" )

## Preupdate
export PREUPDATEAOSP43=$( echo "Aktualisiere $REPOSAOSP43's local_manifests folder" )
export PREUPDATEAOSP=$( echo "Aktualisiere $REPOSAOSP's local_manifests folder" )
export PREUPDATECM10=$( echo "Aktualisiere $REPOSCM10's local_manifests folder" )
export PREUPDATECM=$( echo "Aktualisiere $REPOSCM's local_manifests folder" )
export PREUPDATEOMNI=$( echo "Aktualisiere $REPOSOMNI's local_manifests folder" )

## Configkitchen
export CONFIGKITCHENMENUTITLE=$( echo "Einstellungsmenü" )
export CONFIGKITCHENMENU1=$( echo "Bearbeite Gitpuller" )
export CONFIGKITCHENMENU2=$( echo "Bearbeite Romeditor" )
export CONFIGKITCHENMENU3=$( echo "Erstelle/Bearbeite 'andere Repos'-Liste" )
export CONFIGKITCHENOTHERREPO=$( echo "Dateiverzeichnis der benutzerdefinierten Repos bearbeiten" )
export CONFIGKITCHENOTHERREPONAME=$( echo "Bearbeite Bezeichnung des benutzerefinierten Repo" )

## Fixkitchen
export FIXKITCHENSOMETHINGNOT=$( echo "Irgendwas funktioniert nicht richtig? Was kann ich tun?" )
export FIXKITCHENPURGE=$( echo "Aufräumen = Dateien löschen und von Qriginalquelle neu laden" )
export FIXKITCHENDELETE=$( echo "Löschen = Jetzt löschen!" )
export FIXKITCHENMENU1=$( echo "Repo zu einem ausgewählten local_manifests-Verzeichnis hinzufügen" )
export FIXKITCHENMENU2=$( echo "Ausgewähltes local_manifests-Verzeichnis aufräumen" )
export FIXKITCHENMENU3=$( echo "Ausgwähltes Repositorium aufräumen oder entfernen" )
export FIXKITCHENMENU4=$( echo "Alle Repositorien aufräumen oder entfernen" )
export FIXKITCHENMENU5=$( echo "ROM-Küche aufräumen oder entfernen" )
export FIXKITCHENMENU6=$( echo "ROM-Küche mit allen Abhängigkeiten entfernen" )
export FIXKITCHENMENU7=$( echo "Den Inhalt des Computers löschen" )
export FIXKITCHENMENU8=$( echo "Gesamtes Internet löschen" )
export FIXKITCHENADD=$( echo "Repo zu otherdevices.xml hinzufügen" )
export FIXKITCHENPURGE=$( echo "local_manifests-Verzeichnis aufgeräumt" )
export FIXKITCHENWHICHADD=$( echo "Welches Repo soll hinzugefügt werden?" )
export FIXKITCHENWHICHPURGE=$( echo "Von welchem Repo soll das local_manifests-Verzeichnis aufgeräumt werden?" )
export FIXKITCHENWHICHREPO=$( echo "Welches Repo soll aufgeräumt oder entfernt werden?" )
export FIXKITCHENPURGEDELETE=$( echo "Aufräumen oder löschen?" )
export FIXKITCHENPURGEDELETEEXIT=$( echo "Aufräumen = löscht Dateien und ladet neu von Originalquelle
Löschen = Jetzt löschen!
Exit eingeben um zurückzukehren" )
export FIXKITCHENPURGEDELETEREPO=$( echo "Alle Repositorien aufräumen oder entfernen?" )
export FIXKITCHENPURGEDELETEKITCHEN=$( echo "ROM-Kücke aufräumen oder löschen?" )
export FIXKITCHENREDEEMER=$( echo "Zu Redeemer-Skript wechseln" )
export FIXKITCHENDELETEKITCHEN=$( echo "Soll die ROM-Küche wirklich entfernt werden?" )
export FIXKITCHENTYPEYES=$( echo "Mit \"yes\" bestätigen um fortzufahren" )
export FIXKITCHENTYPEABORT=$( echo "Die Eingabe jeder anderen Taste bricht die Operation ab" )
export FIXKITCHENDESTROYERSWITCH=$( echo "Zu Destroyer-Skript wechseln" )
export FIXKITCHENDELETEKITCHENALL=$( echo "Soll die ROM-Küche mit allen Abhängigkeiten wirklich entfernt werden?" )
export FIXKITCHENNOTDELETEBUILDS=$( echo "Achtung: das Builds-Verzeichnis wird nicht gelöscht" )
export FIXKITCHENDESTROYEROFWORLDSSWITCH=$( echo "Zu Weltenzerstörer-Skript wechseln" )
export FIXKITCHENDELETECOMPUTER=$( echo "Bist Du sicher? Dies löscht alle Inhalte Deines Computers, inklusive aller angeschlossenen Flashlaufwerke und anderer externen Laufwerke!" )
export SUICIDENOTE=$( echo "Ja, bitte alles von meinem Computer löschen" )
export FIXKITCHENMUSTTYPEEXACTLY=$( echo "Mit \"$SUICIDENOTE\" bestätigen um fortzufahren" )
export FIXKITCHENTYPEPASSY=$( echo "Bitte Passwort eingeben um ALLES zu zerstören" )
export TROLLFACETITLE=$( echo "Trollface's Android Kitchen!" )
export TROLLFACEUNDERLINE=$( echo "============================" )
export FIXKITCHENIBET=$( echo "Oh man, I bet you wish it was that easy!" )

## Build Common
export BUILDMENUTITLE=$( echo "Die heutige Lunch-Karte:" )
export BUILDREPOMENU1=$( echo "$REPOSAOKP Repositorium" )
export BUILDREPOMENU2=$( echo "$REPOSAOSP43 Repositorium" )
export BUILDREPOMENU3=$( echo "$REPOSAOSP Repositorium" )
export BUILDREPOMENU4=$( echo "$REPOSCARBON Repositorium" )
export BUILDREPOMENU5=$( echo "$REPOSCM10 Repositorium" )
export BUILDREPOMENU6=$( echo "$REPOSCM Repositorium" )
export BUILDREPOMENU7=$( echo "$REPOSEV Repositorium" )
export BUILDREPOMENU8=$( echo "$REPOSOMNI Repositorium" )
export BUILDREPOMENU9=$( echo "$REPOSPACMAN Repositorium" )
export BUILDREPOMENU10=$( echo "$REPOSPARA Repositorium" )
export BUILDALLABOVE=$( echo "Alle oben genannten Builds!" )
export BUILDREPONOTSETUP=$( echo "Das ausgewählte Android Repositorium ist nicht eingerichtet!" )
export BUILDDEVICENOTCOMPATIBLE=$( echo "Das Gerät ist mit dem ausgewählten Repositorium nicht kompatibel, erneut versuchen!" )
export BUILDMENURETURN=$( echo "Zurück zum Buildmenü, Eingabe drücken um fortzufahren: " )

## Buildmenu
export BUILDMENU1=$( echo "Build Nexus 4" )
export BUILDMENU2=$( echo "Build Nexus 5" )
export BUILDMENU3=$( echo "Build Nexus 7" )
export BUILDMENU4=$( echo "Build Nexus 10" )
export BUILDMENU5=$( echo "Build Galaxy Nexus" )
export BUILDMENU6=$( echo "Build Nexus S" )
export BUILDMENU7=$( echo "Build Xoom Tablet" )
export BUILDMENU8=$( echo "Build alle obigen" )
export BUILDMENU9=$( echo "Build weitere Geräte" )
export BUILDMENU10=$( echo "Build mit weiterem Repositorium" )

## Builddevice
export BUILDDEVICEBEBUILT=$( echo "ist zur Erstellung ausgewählt!" )
export BUILDDEVICEWHICHREPO=$( echo "Von welchem Repositorium wollen wir heute Builds erstellen?" )
export BUILDDEVICENEXUS4=$( echo "Build $NEXUS4" )
export BUILDDEVICENEXUS5=$( echo "Build $NEXUS5" )
export BUILDDEVICEGSMGNEXUS=$( echo "Build $GSMGNEXUS" )
export BUILDDEVICESPRGNEXUS=$( echo "Build $SPRGNEXUS" )
export BUILDDEVICEVZWGNEXUS=$( echo "Build $VZWGNEXUS" )
export BUILDDEVICEGSMNEXUSS=$( echo "Build $GSMNEXUSS" )
export BUILDDEVICESPRNEXUSS=$( echo "Build $SPRNEXUSS" )
export BUILDDEVICEWIFINEXUS72012=$( echo "Build $WIFINEXUS72012" )
export BUILDDEVICEGSMNEXUS72012=$( echo "Build $GSMNEXUS72012" )
export BUILDDEVICEALLNEXUS72012=$( echo "Build $ALLNEXUS72012" )
export BUILDDEVICEWIFINEXUS72013=$( echo "Build $WIFINEXUS72013" )
export BUILDDEVICELTENEXUS72013=$( echo "Build $LTENEXUS72013" )
export BUILDDEVICEALLNEXUS72013=$( echo "Build $ALLNEXUS72013" )
export BUILDDEVICENEXUS10=$( echo "Build $NEXUS10" )
export BUILDDEVICEWIFIXOOM=$( echo "Build $WIFIXOOM" )
export BUILDDEVICEVZWXOOM=$( echo "Build $VZWXOOM" )

## Buildother
export BUILDOTHERBEBUILT=$( echo "Build für 'andere Geräte' wurde ausgewählt!" )
export BUILDOTHERTYPEDEVICE=$( echo "Bitte eingeben für welches Gerät der Build sein soll" )
export BUILDOTHERTYPELIST=$( echo "Mit 'List' alle unterstützten Geräte anzeigen" )
export BUILDOTHERTYPEEXIT=$( echo "Mit 'exit' zurückkehren" )
export BUILDOTHERBUILDTITLE=$( echo "Geräteliste" )
export BUILDOTHERBUILDUNDERLINE=$( echo "===========" )
export BUILDOTHERNOTCOMPATIBLE=$( echo "Das gewählte Gerät ist mit dem Repositorium nicht kompatibel, Build trotzdem erstellen?" )
export BUILDOTHERCONTINUE=$( echo "Mit dem gewählten Build fortfahren" )
export BUILDOTHERNOTVALID=$( echo "Keine gültige Antwort, Build wird nicht erstellt" )

## Buildotherrepo
export BUILDOTHERREPOEMPTY=$( echo "Datei für weitere Repos ist leer, hinzufügen und erneut versuchen!" )
export BUILDOTHERREPOBEBUILT=$( echo "Build für 'anderes Repositorium' ausgewählt!" )

## Buildandro
export BUILDANDROCLEAN=$( echo "Verzeichnis aufräumen?" )
export BUILDANDROCLEANENTER=$( echo "Hast Du gerade unabsichtlich Eingabe gedrückt? Verzeichnis wird trotzdem gesäubert..." )
export BUILDANDROCCACHECONTINUEWITHOUT=$( echo "Es wird ohne Ccache fortgefahren, falls gewünscht Ccache jetzt einrichten" )
export BUILDANDROCCACHEFOUND=$( echo "Ccache-Verzeichnis gefunden, wird für Build verwendet" )
export BUILDANDROCCACHEDIDNOTDETECT=$( echo "Die Küche konnte kein Ccache-Verzeichnis finden, soll dies jetzt erstellt werden?" )
export BUILDANDROCCACHEOTHER=$( echo "Wenn sich Ccache in einem anderen Verzeichnis befindet jetzt 'other' eingeben" )
export BUILDANDROCCACHEHOWBIG=$( echo "Wie groß soll das Ccache-Verzeichnis maximal sein? Empfohlen werden 50-100 Gigabytes" )
export BUILDANDROCCACHEAMOUNTTYPED=$( echo "Denke daran das die Eingabe sich auf Gigybytes bezieht" )
export BUILDANDROCCACHEREPONOTSUPPORTED=$( echo "Repositorium unterstützt kein Ccache, es wird ohne Ccache fortgefahren" )
export BUILDANDROCCACHEEXACTLOCATION=$( echo "Wo befindet sich das Ccache-Verzeichnis? Beispiel für das Standardverzeichnis wäre ~/.ccache" )
export BUILDANDROCCACHENOTFOUND=$( echo "Das angegebene Verzeichnis wurde nicht gefunden, es wird ohne Ccache fortgefahren" )
export BUILDANDROREPONOTSUPPORTED=$( echo "Repositorim nicht unterstützt!" )
export BUILDANDROBUILDMESSEDUP=$( echo "Build ist korrupt!" )
export BUILDANDROMAKETEMP1=$( echo "Temporäres Verzeichnis für Post-Building wird erstellt" )
export BUILDANDROMAKETEMP2=$( echo "fixes" )
export BUILDANDROUNZIP=$( echo "Entpacken" )
export BUILDANDRORMSTUFF=$( echo "Unnötiges Recovery-Verzeichnis und file_contexts wird entfernt von" )
export BUILDANDROADDROM1=$( echo "ROM Manager-Attribute werden hinzugefügt zu" )
export BUILDANDROADDROM2=$( echo "'s build.prop" )
export BUILDANDROZIP=$( echo "Packe" )
export BUILDANDROSIGN1=$( echo "Signing" )
export BUILDANDROSIGN2=$( echo "mit test keys" )
export BUILDANDROMOVEOLD1=$( echo "Verschiebe älteres Build nach" )
export BUILDANDROMOVEOLD2=$( echo "/alt" )
export BUILDANDROCOPY=$( echo "Kopiere nach" )
export BUILDANDROCLEANUP=$( echo "Temporäres Verzeichnis wird aufgeräumt" )

## Buildautomenu
export BUILDAUTOMENUTITLE=$( echo "Auto Builder-Menü" )
export BUILDAUTOMENU1=$( echo "Starte Auto Builder" )
export BUILDAUTOMENU2=$( echo "Hinzufügen zu Auto Build-Liste" )
export BUILDAUTOMENU3=$( echo "Lösche Auto Build-Liste" )
export BUILDAUTOMENU4=$( echo "Verwende Auto Builder-Ausgabe" )
export BUILDAUTOMENU5=$( echo "Verwende Auto Builder-Funktion 'Build anderes Repo'" )
export BUILDAUTOMENU6=$( echo "Verwende Auto Builders 'Sleep-Funktion'" )
export BUILDAUTOMENUSETAUTO=$( echo "Welches Android-Repo soll mit Auto Build bearbeitet werden?" )
export BUILDAUTOMENUMOVEON=$( echo "Fertig mit dem Hinzufügen der Repos, weiter zum Hinzufügen der Geräte" )
export BUILDAUTOMENUADD1=$( echo "Hinzugefügt" )
export BUILDAUTOMENUADD2=$( echo "zu Auto Build-Dateien" )
export BUILDAUTOMENUTYPEDEVICE=$( echo "Eingeben welches Gerät mit Auto Build bearbeitet werden soll" )
export BUILDAUTOMENUWANTTOCLEAR=$( echo "Sollen die Auto Build-Dateien wirklich gelöscht werden?" )
export BUILDAUTOMENUCLEARED=$( echo "Auto Build-Dateien gelöscht" )
export BUILDAUTOMENUNOTCLEARED=$( echo "Auto Build-Dateien wurden nicht angefasst" )
export BUILDAUTOMENUOUTPUT=$( echo "Die Buildauto-Ausgabe erfolgt im swordkitchen script-Verzeichnis" )
export BUILDAUTOMENUSOMEWHERE=$( echo "Sofern jetzt kein anderer Ort angegeben wird?" )
export BUILDAUTOMENUTYPEOUTPUT=$( echo "Mit 'yes' ein anderes Verzeichnis festlegen:" )
export BUILDAUTOMENUTYPEABSOLUTE=$( echo "Gewünschten Pfad zur Ausgabe der buildauto.txt eingeben" )
export BUILDAUTOMENUOUTPUTSENT=$( echo "Ausgabe wird kopiert nach" )
export BUILDAUTOMENUOUTPUTCLEAR=$( echo "Ausgabe-Datei gelöscht, wird von Buildauto nun regelmässig erstellt" )
export BUILDAUTOMENUADDBELOWREPO=$( echo "Repo-Verzeichnis für Autobuild in der nächsten Zeile eingeben, otherrepo befindet sich im otherrepo-Verzeichnis; ein Repo pro Zeile" )
export BUILDAUTOMENUADDBELOWDEVICE=$( echo "Geräte-Codenamen für Autobuild in der nächsten Zeile eingeben, für jedes Gerät eine neue Zeile" )
export BUILDAUTOMENUOTHERREPOON=$( echo "Auto Builders 'Built anderes Repo' ist aktiv!" )
export BUILDAUTOMENUOTHERREPOOFF=$( echo "Auto Builders 'Built anderes Repo' ist inaktiv!" )
export BUILDAUTOMENUCOMPSLEEPTIME1=$( echo "Soll der Computer schlafen für einige" )
export BUILDAUTOMENUCOMPSLEEPTIME2=$( echo "festgelegte Stunden oder zu einer bestimmten Zeit aufwachen?" )
export BUILDAUTOMENUSLEEPMENU1=$( echo "Zu einer bestimmten Zeit aufwachen" )
export BUILDAUTOMENUSLEEPMENU2=$( echo "Einige festgelgte Stunden" )
export BUILDAUTOMENUSPECIFIC1=$( echo "Zu welchem Zeitpunkt soll der Build-Server am nächsten Tag aufwachen?" )
export BUILDAUTOMENUSPECIFIC2=$( echo "24-Stunden-Konfiguration, Beispiel: für 19.00 Uhr verwende 19:00, for 7.00 Uhr verwende 07:00" )
export BUILDAUTOMENUHOURS1=$( echo "Wie lange soll der Build-Server nach Beendigung schlafen?" )
export BUILDAUTOMENUHOURS2=$( echo "Bitte Anzahl der Stunden eingeben" )
export BUILDAUTOMENUTYPEPASSY=$( echo "Benutzerpasswort eingeben damit der Build-Server schlafen kann" )
export BUILDAUTOMENUSLEEPON=$( echo "Auto Builder Schlaffunktion ist jetzt aktiv!" )
export BUILDAUTOMENUSLEEPOFF=$( echo "Auto Builder Schlaffunktion ist jetzt inaktiv!" )

## Buildauto
export BUILDAUTOPLEASE=( echo "Bitte das Auto Builder-Einstellungsmenü verwenden" )
export BUILDAUTOBOTH=( echo "Weder Repositorium noch Gerät festgelegt!" )
export BUILDAUTOREPO=( echo "Kein Repositorium für Auto Builder festgelegt" )
export BUILDAUTODEVICE=( echo "Kein Gerät für Auto Builder festgelegt!" )
export BUILDAUTOWAIT=( echo "Warte zehn Minuten! Dies ist kein Countdown..." )
export BUILDAUTOSLEEP=( echo "Schlafe..." )
